name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    environment:
        name: PrivateAzure

    env:      
      DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}      
      DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE_PREFIX }}/familyboard-aspnetcore      
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}  
      DOCKER_TARGET_PLATFORM: linux/arm/v7  

    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    - name: Restore dependencies
      run: dotnet restore -r linux-arm

    - name: Build
      run: dotnet build --no-restore -r linux-arm

    - name: Publish
      run: dotnet publish -r linux-arm

    # - name: List
    #   run: pwd && ls -laR

    - name: Set up Docker Buildx      
      uses: crazy-max/ghaction-docker-buildx@v1      
      with:        
        version: latest

    - name: Prepare      
      if: success()      
      id: prepare      
      run: |        
        echo ::set-output name=docker_platform::${DOCKER_TARGET_PLATFORM}        
        echo ::set-output name=docker_image::${DOCKER_REGISTRY}/${DOCKER_IMAGE}        
        echo ::set-output name=version::${GITHUB_RUN_NUMBER}

    - name: Docker Login      
      if: success()      
      run: |        
        echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} --username "${DOCKER_USERNAME}" --password-stdin

    - name: Run Buildx (push image)      
      if: success()      
      run: |        
        docker buildx build \
          --platform ${{ steps.prepare.outputs.docker_platform }} \
          --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} \
          --tag ${{ steps.prepare.outputs.docker_image }}:latest \
          --file ./Dockerfile \
          --output type=image,push=true .
