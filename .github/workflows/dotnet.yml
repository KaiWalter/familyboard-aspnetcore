name: .NET

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    environment:
        name: PrivateAzure

    env:      
      DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}      
      DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE_PREFIX }}/familyboard-aspnetcore      
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}  
      DOCKER_TARGET_PLATFORM: linux/arm/v7  

    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore -r linux-arm familyboard-aspnetcore.csproj

    - name: Build
      run: dotnet build --no-restore -r linux-arm --self-contained familyboard-aspnetcore.csproj

    - name: Publish
      run: dotnet publish -r linux-arm --self-contained familyboard-aspnetcore.csproj

    - name: Restore dependencies 2
      run: dotnet restore -r linux-arm ConsoleTest/ConsoleTest.csproj

    - name: Build 2
      run: dotnet build --no-restore -r linux-arm --self-contained ConsoleTest/ConsoleTest.csproj

    - name: Publish 2
      run: dotnet publish -r linux-arm --self-contained ConsoleTest/ConsoleTest.csproj

    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Inspect builder
      run: |
        echo "Name:      ${{ steps.buildx.outputs.name }}"
        echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
        echo "Status:    ${{ steps.buildx.outputs.status }}"
        echo "Flags:     ${{ steps.buildx.outputs.flags }}"
        echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

    - name: Prepare      
      if: success()      
      id: prepare      
      run: |        
        echo ::set-output name=docker_platform::${DOCKER_TARGET_PLATFORM}        
        echo ::set-output name=docker_image::${DOCKER_REGISTRY}/${DOCKER_IMAGE}        
        echo ::set-output name=version::${GITHUB_RUN_NUMBER}

    - name: Docker Login      
      if: success()      
      run: |        
        echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} --username "${DOCKER_USERNAME}" --password-stdin

    - name: Install Package pwgen
      uses: ConorMacBride/install-package@v1.1.0        
      with:
        apt: pwgen

    - name: Run Buildx (push image)      
      if: success()      
      run: |
        export CERTPASS=`pwgen`
        docker buildx build \
          --platform ${{ steps.prepare.outputs.docker_platform }} \
          --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} \
          --tag ${{ steps.prepare.outputs.docker_image }}:latest \
          --build-arg CERTPASS=$CERTPASS \
          --file ./Dockerfile \
          --output type=image,push=true .
